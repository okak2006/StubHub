APP-CREATION STEPS + Explanation

This section is on creating the auth service. After creating the auth folder and running npm init -y in the auth folder, we will start by installing necessary dependencies.

1) cmd: `install typescript express ts-node-dev @type/express express-validator express-async-errors mongoose @types/mongoose`
2) cmd: `tsc --config init` to generate ts config file and set up configuration (see tsconfig.json for more details)
3) create src folder > index.ts > set up basic express server
4) set up npm start script in package.json and verify that the app can be started

Before building actual auth service, set up k8 first:
5) create Dockerfile & dockerignore file.This file provides instructions on how an image should be built. 
6) create k8 depl file after enabling Kubernetes from docker desktop. This file instructs how many pods we want to create, which container we want to put inside the pod, and which image the container should use  
   i) create infra folder at project root level > make k8s folder > auth.depl.yaml
7) create skaffold file. This file has instructions for how to handle build, push, and deploy application continuously.For example, everytime code changes in auth directory, it would sync the changes with container in the k8 cluster
8) set up ingress-nginx (instructions: https://kubernetes.github.io/ingress-nginx/deploy/)
   ingress controller resides inside the cluster and is responsible for routing requests to pods
   however, to access the controller from outside, it needs to go through a load-balancer
9) Google Cloud set up (ensure Gcloud account is set up + GCloud SDK is installed + added to Sys Env variable)
   i)   GCloud console > Kubernetes > Cluster > Enable
   ii)  GCloud console > Kubernetes create cluster. Std settings for default-pool. Go to Node > choose machine (n1 + small is good enough for our project)
   iii) Install GCloud SDK and login using gcloud shell: `gcloud auth login`
   iv)  Initialize GCloud: `gcloud init` > follow wizard
   v)   Set up context to connect to cluster in Gloud: `gcloud container clusters get-credentials <cluster_name>`. This switches K8 to cloud.
   vi)  Enable Gcloud Build. GCloud console> search Cloud Build API > Enable
10)Update skaffold to use GCloud
11)Set up ingress-nginx on Gloud Cluster: (GCloud instructions: https://kubernetes.github.io/ingress-nginx/deploy/)
12)Update local machine's host file to point to Load balancer IP. GCloud Console > Network Services > IP 
13)`skaffold dev`
14)set up express routes (see index.ts for boilerplate)
15)set up errors and handling with ts (see below for detail)

----
Error Handling Notes: all of the logic below is applied to achieve normalized error response. In microservices, we often end up with
different backend architecture which can return errors in various format. This strategy allows us to achieve consistent error response object.

1) If error criteria is met in each routes, it throws a specific kind of Error (i.e. RequestValidationError) which is extended from the CustomError abstract class
2) This CustomError is also  extended from JS native Error object so that express error-handling mw can detect the error
3) The end goal is to throw an object like Error with specific custom properties: statusCode + message + optional field parameters
4) Whenever an error is thrown, the error handler middleware gets called
5) The middleware takes a few params like "err" which has properties and methods from the thrown error (i.e. RequestValidationError)
6) The middleware checks if the thrown error is an instanceof the CustomError. This effectively ensures it has required properties and methods.
7) The middleware then sends back a response that utilizes props on err such as statusCode and serializeErrors()

TS Errors:
   As an additional layer to ensure that the subclasses has correct structure and returns message in correct format, it uses Abstract classes.
   Abstract classes are used to set up requirements for subclasses. 
   When we translate Abstract Class to JS, we end up with a class definition in JS (unlike interfaces; there is no "interfaces" in JS)
   This means that we can use it in "instanceof" checks like above
-----

16) set up mongodb (see auth-mongo-depl.yaml) and add it to skaffold
17) connect to mongodb on app start
18) build user model (representation of db table) for mongoose. Mongoose user document represents one single user
19) build interface and helper function for ts so that it can check the parameters passed to constructor (i.e. email, pass for User model)
20) build signup route logic (see signup.ts)
21) create password hashing and comparison service (see password.ts) and add it as a pre-save hook in singup.ts

------
Authentication Strategies and Options

There are multiple strategies we can deploy for authentications in microservices but each has its own downside. For example,
if we set our individual services (i.e. ticket-order service) to handle authentication by communicating directly with the auth service, 
we introduce a strict dependency where if the authentication service goes down, any subsequent request to that service
will be rejected. To overcome this problem, we can build in the authentication logic inside each service. The downside to this is
that we are making assumptions that the JWT is valid. For example, even if a user gets banned, that user can still have a JWT token
that is valid and thus make requests. To solve this issue, we can set some expiration time so that after it expired, the user is
forced to refresh his token with the authentication service. If we want to make the app even more secure, whenever we want to
invalidate the token, we can throw an event to a event-bus which in turn emits to all the service that the user should be banned.
That user's information can be stored in short-lived cache memory equivalent to the expiration period of all tokens (we don't want
each service to track all banned users since that can eat up a lot of memory).

------ 
JWT vs Cookies

JWT is mostly used for authentication vs authorization and we need to handle the tokens manually. Cookies on the other hand, are transport
mechanism and can store any data. It's not necessarily for authentication and authorization and they are automatically managed by the browser.

For this app our auth mechanisms require that it must be able to tell us details about a user (permissions, etc), handle authorization info,
have a built-in tamper resistant way to handle expiration and invalidation, be understood between different backend language (since
often time microservices deploy multiple backend languages) and must not require some kind of backing data store on the server. JWT
saftisfies these requirements and has built in function to handle these tasks. 

Cookies on the other hand can be more fragile (i.e. users can easily copy the cookie to circumvent expiration). We just need to come up 
with a way to communicate info via JWT between server and browser. However, there is some additional consideration we need to make since 
we will be building a server side rendered application. With server side rendering, we don't have much control over our initial request 
unlike traditional client side rendered application where we first fetch html + js file and modify header bodies, etc. For example, in a
normal react app, we show a part of the page then make a request to the server by including jwt in the headers and based on the response,
render rest of the page. However, in SSR we show the entire page at once which is built by the server so if the server wants to build the page,
it inspects the cookie and based on the auth status, builds the rest of the page. To do this, we need to store the JWT as a cookie since that's 
the only way we can communicate the token to backend during initial page load. By storing JWT in cookies and using cookie-session library 
we do not have to rely on backend data store. 

-------

22. install cookie-session @types/cookie-session and configure express to use cookie-session inside index.ts
23. install jwt and use it in signup.ts to put user info on the token and then set it inside cookie
   i) in doing so, we need to create an object inside k8 cluster that stores jwt secret which will be used
      across multiple services to sign and validate tokens. Specifically we will assign the jwt's as environment vars in each pods
   ii) to create secret `kubectl create generic jwt-secret --from-literal=jwt=fea9jwaf` note: we can assign any key value pair at the end
   iii) modify auth.depl.yaml to access the key as environment variable
24) create signin route - very similar to signup route
   i) extract validation logic into middleware for reuse
25) create current user signin route
   i) this is for future use: it checks req.session.jwt and see if it's empty or valid and if so, send back user info
      rather than signining in everytime user hits different routes, we can simply make a request to this route
   ii) make this function a middleware since it will be used repeatedly in different services
   iii) on a similar note, also make a middleware to reject request if user is not logged in

----

Augmenting Type Definitions

Sometimes we need to augment type definitions. For example, TS has a Request type for request, but we might want to add
additional properties to the request object. This was the case for current-user middleware where we want to add the 
current-user to the request object. To do this, we first defined an interface for payload since by default ts expects
const to be a string or an object. We did this by adding 'as {interfaceName}' at the end of the payload object. To reach
into existing type definition:

declare global {
  namespace Express {
    interface Request {
      currentUser?: UserPayload;
    }
  }
}

----

26) About tests: tests will run directly from terminal without using docker or k8. Note that this is only possible
    if local environment is capable of running each service. In our case, the auth service only requires nodeJS and
    mongodb
   i)   use jest to start in-memory copy of mongodb to allow quickly testing multiple db at the same time
   ii)  start our express app
   iii) supertest library to make fake request to our express app.
        Note: supertest bounds connection to ephemeral port if server is not already listening for connections.
        This is a convenient feature in microservices when we try to run multiple tests for different services because
        these services might try to listen to the same port when they start => fail to listen.
   iv)  run assertions to make sure the request did the right thing
27) To make express work with supertest, we will split the index file into two parts. After modification index.ts will be
    responsible for starting the app, and a new file app.js will export express instance without port information. This
    allows us to move express app instance to the test files so supertest can start app using available properties
28) add testing scripts to package.json
29) create tests
   i) when testing with jest, create a __test__ folder at same directory as the files that you want to test.
   ii) within the __test__ folder, each test file will be named {name of file to test}.test.ts
   iii) in setup.ts, write some general instructions before and after running each test (i.e. connect to db, kill connection, etc)
   Note: jest / jest-ts sometimes doesn't see changes you make to files. If that happens, just ctrl+c and npm run test again
   Note: special care needs to be taken when dealing with tokens (see current-user.ts) since supertest's behavior is different from browser / postman

----
Next js
1) When using next.js, routing is handled by folder structure. Each page should be placed inside the pages folder
   - install dependencies: npm run install next react react-dom axios bootstrap
2) npm run dev should kick off next
3) create client-depl.yaml file in infra/k8s just like auth-depl.yaml
4) Next.js sometimes has issues detecting file changes inside docker container. To overcome this issue write a config in next.config.js
5) add bootstrap. in __app.s import bootstrap and add code in order to add bootstrap globally
6) create signup form. here we have some logic to submit and handle errors that will be used across different pages so make a custom hook
   this hook returns a method and an error state. inside hook whenever we make a call and get errors, we are setting the error state.
   the error state is a JSX containing the error message structure. since this state is returned, we will always have the live up-to-date
   error state in the component that uses the hook
   note: if we throw an error inside doRequest method of the hook, code won't proceed further than await
7) when user hits client and the fully rendered component that gets returned needs to contain info about whether user is signed in
   in other words, we need to figure out how to make request while our component is getting served from server
   i)   inspect url of incoming request and determine set of components to show
   ii)  call those components 'getInitialProps' static method which is a method unique to NextJS
        it calls this while it attempts to render our application on server. any object returned here will be accessible as prop
   iii) render each component with data from getInitialProps 'one time'
   iv)  assemble html from all components, send back response

----
Note on server side request in NextJS

axios behaves differently when we try to make calls from browser and server. For our next js set up, if we make a request to ticketing.dev, it makes a 
get request to localhost:80, which in turn goes to ingress-nginx. Because ingress nginx didn't see any specific url path, it sent off
request to default handler which is client service. Then next js also sees there's no path and calls getInitialProps and calls /api/users/currentUser.
This gets translated to localhost:80/api/users/currentuser OF THE CONTAINER. Unless we allow solutions like cross namespace service communication,
we will get an errconnect error. This would be different if we execute the request on the browser side because when we make request to
/api/users/currentuser, the browser assumes we are making request on the same domain = ticketing.dev/api/users/currentuser as opposed to localhost
of a specific container

To get around the issue, when we make requests from server side, we can make direct requests to ingress-nginx which already knows how to handle 
incoming requests and forwarding it to different services. 2 challenges: how to hit ingress-nginx and how to manage cookies.

Between pods in the same namespace, we can use cluster ip service but to hit ingress-nginx from pods. Inside k8, ingress-nginx resides
outside the default namespace in the 'ingress-nginx' namespace. In Summary, we need to dynamically change requests depending on where
it's coming from: request from component or request from getInitialProps

to list all namespace: `kubectl get namespace`
to get service name in specific namespace: `kubectl get services -n {namespace}` (i.e. ingress-nginx)
----

When getInitialProps gets called
- Hard refresh of page
- Clicking link from different domain
- Typing URL into address balancer

----
8) create a build-client api which returns different axios calls pointing to different endpoints depending on whether the request is 
   coming from client or server side. Note: when coming server, we need to specify the "host" so ingress-nginx can process request
9) also add cookies. getInitialProps function has access to req object. Within req, it has headers (req.headers), which contains
   host and cookies. Pass the header onto build-client api so it can append req.header on axios