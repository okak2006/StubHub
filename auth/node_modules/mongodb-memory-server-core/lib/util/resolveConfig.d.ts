export declare enum ResolveConfigVariables {
    DOWNLOAD_DIR = "DOWNLOAD_DIR",
    PLATFORM = "PLATFORM",
    ARCH = "ARCH",
    VERSION = "VERSION",
    DEBUG = "DEBUG",
    DOWNLOAD_MIRROR = "DOWNLOAD_MIRROR",
    DOWNLOAD_URL = "DOWNLOAD_URL",
    PREFER_GLOBAL_PATH = "PREFER_GLOBAL_PATH",
    DISABLE_POSTINSTALL = "DISABLE_POSTINSTALL",
    SYSTEM_BINARY = "SYSTEM_BINARY",
    MD5_CHECK = "MD5_CHECK",
    ARCHIVE_NAME = "ARCHIVE_NAME",
    RUNTIME_DOWNLOAD = "RUNTIME_DOWNLOAD",
    USE_HTTP = "USE_HTTP",
    SYSTEM_BINARY_VERSION_CHECK = "SYSTEM_BINARY_VERSION_CHECK"
}
export declare const ENV_CONFIG_PREFIX = "MONGOMS_";
export declare const defaultValues: Map<ResolveConfigVariables, string>;
/**
 * Set an Default value for an specific key
 * Mostly only used internally (for the "global-x.x" packages)
 * @param key The Key the default value should be assigned to
 * @param value The Value what the default should be
 */
export declare function setDefaultValue(key: ResolveConfigVariables, value: string): void;
/**
 * Find the nearest package.json (that has an non-empty config field) for the provided directory
 * @param directory Set an custom directory to search the config in (default: process.cwd())
 */
export declare function findPackageJson(directory?: string): Record<string, string>;
/**
 * Resolve "variableName" value (process.env | packagejson | default | undefined)
 * @param variableName The variable to search an value for
 */
export declare function resolveConfig(variableName: ResolveConfigVariables): string | undefined;
export default resolveConfig;
/**
 * Helper Function to add the prefix for "process.env[]"
 */
export declare function envName(variableName: ResolveConfigVariables): string;
/**
 * Convert "1, on, yes, true" to true (otherwise false)
 * @param env The String / Environment Variable to check
 */
export declare function envToBool(env?: string): boolean;
//# sourceMappingURL=resolveConfig.d.ts.map